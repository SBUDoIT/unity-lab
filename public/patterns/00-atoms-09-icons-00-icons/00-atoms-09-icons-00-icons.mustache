 &lt;section id=&quot;icon&quot; class=&quot;introduction arrow-below arrow-below-white cozy&quot;&gt;
        &lt;div class=&quot;container&quot;&gt;
           &lt;div class=&quot;row&quot;&gt;
                &lt;h1 class=&quot;centered&quot;&gt;Icons&lt;/h1&gt;
                &lt;div class=&quot;class_box bg-texture-az-subtle bg-youtube&quot;&gt;&lt;/div&gt;
                &lt;form id=&quot;live-search&quot; action=&quot;&quot; class=&quot;styled&quot; method=&quot;post&quot;&gt;
                    &lt;fieldset&gt;
                        Search for Icons:&lt;b /&gt;
                        &lt;input type=&quot;text&quot; class=&quot;text-input&quot; id=&quot;filter&quot; value=&quot;&quot; /&gt;&lt;br /&gt;
                        &lt;span id=&quot;filter-count&quot;&gt;&lt;/span&gt;
                    &lt;/fieldset&gt;
                &lt;/form&gt;
                &lt;div id=&quot;popups&quot;&gt;&lt;/div&gt;
                &lt;div class=&quot;icon-container&quot;&gt;&lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/section&gt;

&lt;script&gt;

$(document).ready(function() {

    // The Google Geocoding API url used to get the JSON data
    var icons = &quot;../../fonts/sbu-icons/selection.json&quot;;
    var icon_info ={

    }
    $.getJSON(icons, function (json) {

        // Set the variables from the results array
        var icons = json.icons;

        var iconSets = {};
        iconSets[9] = 'Font Awesome';
        iconSets[8] = 'SBU Custom Icons';
        iconSets[5] = 'IcoMoon Premium';

        var output = '';
        var popups = '';

        var curSet = -1;

        var iconCount=0;

        $.each(icons, function(index, icon) {
            
            iconCount++;

            if(curSet != icon.setId) {
                curSet = icon.setId;
                output += '&lt;h2&gt;' + iconSets[curSet] + '&lt;/h2&gt;' + '&lt;ul class=&quot;icons&quot;&gt;';
            }   
          
            var lig = icon.properties.ligatures;
            var name = icon.properties.name;
            var id = icon.properties.id;
            var tags = '';
            var aliases = '';

            if(icon.properties.ligatures != null) {
               icon.properties.ligatures;
            }  

            if(icon.properties.name != null) {
                if(name.indexOf(&quot;,&quot;) &gt; 0) {
                    name = name.substring(0, name.indexOf(&quot;,&quot;));
                    aliases = icon.properties.name.substring(icon.properties.name.indexOf(&quot;,&quot;)+1);
                }
            }
                          
            $.each(icon.icon.tags, function(tagIndex, tag) {
                tags += ', ' + tag;
            });

            if(tags.length &gt; 3) {
                tags = tags.substring(2);
            }

            if(tags != null &amp;&amp; tags != '') {
                tags = 'Tags: ' + tags + '&lt;br /&gt;';
                tags = tags.replace(',', ', ');
            } else {
                tags = '';
            }
            
            if(lig != null &amp;&amp; lig != '') {
                lig = 'Ligatures: ' + lig + '&lt;br /&gt;';
            } else {
                lig = '';
            }
            
            if(aliases != null &amp;&amp; aliases  != '') {
                aliases = 'Aliases: ' + aliases + '&lt;br /&gt;';
            } else {
                aliases = '';
            }

            icon_id = curSet+&quot;-&quot;+name           
            d =  { 
                &quot;name&quot;: name,
                &quot;aliases&quot;:aliases,
                &quot;lig&quot;:lig,
                &quot;tags&quot;:tags,
                }
            icon_info[icon_id] = d

            output += '&lt;li class=&quot;popper&quot; data-popbox=&quot;' + curSet + '-' + name + '&quot;&gt;&lt;div class=&quot;contents&quot;&gt;&lt;span class=&quot;sbuicon-' + name + '&quot;&gt;&lt;/span&gt;&lt;div style=&quot;display: none;&quot;&gt;' + name + ' ' + lig + '&lt;/div&gt;' /*+ popup */ + '&lt;/li&gt;';  
        });

        output += &quot;&lt;/ul&gt;&quot;;
        
        $('div.icon-container').html(output);

        $('#filter-count').text('Number of Icons = ' + iconCount);

        $('ul.icons li .contents').matchHeight({
            byRow: false,
            property: 'height'
        });

        $('li.popper').click(function(e) {
                icon_prop = icon_info[$(this).attr(&quot;data-popbox&quot;)]
                $(&quot;.class_box&quot;).empty();
                $(&quot;.class_box&quot;).show();
                $(&quot;.class_box&quot;).append('&lt;h2&gt;' + icon_prop[&quot;name&quot;] + '&lt;/h2&gt;&lt;p&gt;Class: sbuicon-' + icon_prop[&quot;name&quot;] + '&lt;br /&gt;' + icon_prop[&quot;aliases&quot;] + icon_prop[&quot;lig&quot;] + icon_prop[&quot;tags&quot;] +'&lt;/p&gt;&lt;span class=&quot;class_icon sbuicon-' + icon_prop[&quot;name&quot;] + '&quot;&gt;&lt;/span&gt;')

            }
            ); 

    });
    $(&quot;.class_box&quot;).hide();  // hide class_box when page first loads

});


$(document).ready(function(){
    $(&quot;#filter&quot;).keyup(function(){
 
        // Retrieve the input field text and reset the count to zero
        var filter = $(this).val(), count = 0;
 
        // Loop through the comment list
        $(&quot;.icons li&quot;).each(function(){
 
            // If the list item does not contain the text phrase fade it out
            if ($(this).text().search(new RegExp(filter, &quot;i&quot;)) &lt; 0) {
                $(this).fadeOut();
 
            // Show the list item if the phrase matches and increase the count by 1
            } else {
                $(this).show();
                count++;
            }
        });
 
        // Update the count
        var numberItems = count;
        $(&quot;#filter-count&quot;).text(&quot;Number of Icons = &quot;+count);
    });
});

&lt;/script&gt;