

&lt;script type=&quot;text/javascript&quot;&gt;




function getColors()
{
	colors = [];
	//foreach color card
	
	$(&quot;#colors .allowed-colors .color-card&quot;).each(function() {

		classList = $(this).attr('class').split(/\s+/);
	 	
	 	$.each(classList, function(index, item) {
	 		
	 		if(item.indexOf('bg-') == 0)
	 		{
	 			colors.push(item);
	 		}
	 	});
 	});

 	

 	return colors;
}

function getOverlays()
{
	overlays = [];
	//foreach color card
	
	$(&quot;#colors .overlay-card&quot;).each(function() {

		classList = $(this).attr('class').split(/\s+/);
	 	
	 	$.each(classList, function(index, item) {
	 		
	 		if(item.indexOf('overlay-') == 0 &amp;&amp; item != 'overlay-card')
	 		{
	 			overlays.push(item);
	 		}
	 	});
 	});

 	return overlays;
}

function load()
{
  	
  	//get array of colors, build into html list
  	colors = getColors();
  	

  	overlays = getOverlays();
  	overlayList = '';
	$.each(overlays, function(index, item) {
				overlayList += &quot;&lt;li class=&quot; + item + &quot;&gt;&lt;/li&gt;&quot;;
		});	
  	

  	//create array of paddings, build into html list
  	paddings = ['fluffy', 'cushy', 'airy', 'spacey', 'comfy', 'cozy', 'snug', 'tight'];
  	paddingList = '';

  	$.each(paddings, function(index, item) {
  		paddingList += &quot;&lt;li class=&quot; + item + &quot;&gt;&quot; + item + &quot;&lt;/li&gt;&quot;;
  	});

  	//read list of textures from json
  	$.getJSON(&quot;../../data/textures.json&quot;, function ( data ) { 

		var items = [];
		

		var i = 0;
		var texture=&quot;&quot;;
		var container = '';
		var bgColor = '';
		$.each(data, function (key, val) {
				
			texture = key;
			defaultColor = data[key].bgDefault;
			
			if(!defaultColor)
				defaultColor='bg-red';

			whitelist = data[key].bgWhitelist;		
			blacklist = data[key].bgBlacklist;
			if(whitelist)
			{
				
				colorList = '';
				$.each(whitelist, function(index, item) {
  					colorList += &quot;&lt;li class=&quot; + item + &quot;&gt;&lt;/li&gt;&quot;;
  				});
			}
			else if(blacklist)
			{
				
				colorList = '';
				$.each(colors, function(index, item) {
					
  					if($.inArray(item, blacklist) &lt; 0)
  					{
  						colorList += &quot;&lt;li class=&quot; + item + &quot;&gt;&lt;/li&gt;&quot;;
  					}
  					
  				});	
			}
			else
			{
				colorList = '';
				$.each(colors, function(index, item) {
  						colorList += &quot;&lt;li class=&quot; + item + &quot;&gt;&lt;/li&gt;&quot;;
  				});	
			}

	
			

            defaultPadding = &quot;fluffy&quot;
			texture = &quot;bg-texture-&quot; + texture;
			heading = defaultPadding + &quot; &quot; + texture + &quot; &quot; + defaultColor;
			 items.push( &quot;&lt;section id='texture-&quot; + i + &quot;' class='&quot; + defaultColor + &quot; &quot; + defaultPadding + &quot; &quot; + texture + &quot;'&gt;&lt;div class='container'&gt;&lt;div class='row'&gt;&lt;div class='col-sm-12'&gt;&lt;h2 class='section-header section-themeable'&gt;&quot; + heading + &quot;&lt;/h2&gt;&lt;ul class='color-picker'&gt;&quot; + colorList + &quot;&lt;/ul&gt;&lt;ul class='padding-picker'&gt;&quot; + paddingList + &quot;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&quot; );
			 i++;
		});

 		$( &quot;#bg-textures&quot;).append(items.join(&quot;&quot;));

 			//when a padding size gets clicked on...
	 	$('#bg-textures .padding-picker li').click( function() {

		 	li = $(this); //padding that got clicked on
	 		section = $(this).parent().closest(&quot;section&quot;); //section the padding item lives in
	 		classList = section.attr('class').split(/\s+/); //build array of classes on that section

		 	$.each(classList, function(index, item) { //search classes remove existing padding

		 		if($.inArray(item, paddings) &gt;= 0)
		 		{
		 			section.removeClass(item);
		 		}
		 	});

	 		section.addClass(li.attr('class')); //add clicked padding to section
	 		$('#' + section[0].id + ' h2').html(section.attr('class'));
	 	});

	 	 		//when a color gets clicked on...
		$('#bg-textures .color-picker li').click( function() {

		 	li = $(this); //what got clicked
 			section = $(this).parent().closest(&quot;section&quot;); //the section the clicked item lives in
 			classList = section.attr('class').split(/\s+/); //build array of classes on that section
			
			//search class array looking for bg-color 				
 			$.each(classList, function(index, item) {
 		
		 		if(item.indexOf('bg-') == 0 &amp;&amp; item.indexOf('bg-texture') &lt; 0)
		 		{
		 			section.removeClass(item);
		 		}
 			});

 			//add clicked bg-color to section
 			section.addClass(li.attr('class'));
 			
 			$('#' + section[0].id + ' h2').html(section.attr('class'));
 		});

 	});


	$.getJSON(&quot;../../data/patterns.json&quot;, function ( data ) { 

		var items = [];

				

		var i = 0;
		var pattern=&quot;&quot;;
		var container = '';
		var overlayColor = '';
		$.each(data, function (key, val) {



			pattern = key;

			overlayDefault = data[key].overlayDefault;
			
			if(!overlayDefault)
				overlayDefault='overlay-red';

			whitelist = data[key].overlayWhitelist;		
			blacklist = data[key].overlayBlacklist;
			if(whitelist)
			{

				overlayList = '';
				$.each(whitelist, function(index, item) {
  					overlayList += &quot;&lt;li class=&quot; + item + &quot;&gt;&lt;/li&gt;&quot;;
  				});
			}
			else if(blacklist)
			{
				
				overlayList = '';
				$.each(overlays, function(index, item) {
					
  					if($.inArray(item, blacklist) &lt; 0)
  					{
  						overlayList += &quot;&lt;li class=&quot; + item + &quot;&gt;&lt;/li&gt;&quot;;
  					}
  				});	
			}
			else
			{
				overlayList = '';
				$.each(overlays, function(index, item) {
  						overlayList += &quot;&lt;li class=&quot; + item + &quot;&gt;&lt;/li&gt;&quot;;
  				});	
			}

			console.log(overlayList);


	
			pattern = &quot;bg-pattern-&quot; + pattern;
			heading = &quot;fluffy &quot; + pattern + &quot; &quot; + overlayDefault;
			 items.push( &quot;&lt;section id='pattern-&quot; + i + &quot;' class='&quot; + overlayDefault + &quot; fluffy &quot; + pattern + &quot;'&gt;&lt;div class='container'&gt;&lt;div class='row'&gt;&lt;div class='col-sm-12'&gt;&lt;h2 class='section-header white'&gt;&quot; + heading + &quot;&lt;/h2&gt;&lt;ul class='overlay-picker'&gt;&quot; + overlayList + &quot;&lt;/ul&gt;&lt;ul class='padding-picker'&gt;&quot; + paddingList + &quot;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&quot; );
			 i++;
		});

 		$( &quot;#bg-patterns&quot;).append(items.join(&quot;&quot;));

 		//when a color gets clicked on...
		$('#bg-patterns .overlay-picker li').click( function() {

		 	li = $(this); //what got clicked
 			section = $(this).parent().closest(&quot;section&quot;);
 			heading = $(this).closest(&quot;h2&quot;);
 			
 			classList = section.attr('class').split(/\s+/); //build array of classes on that section
			
			//search class array looking for bg-color 				
 			$.each(classList, function(index, item) {
 		
		 		if(item.indexOf('overlay-') == 0)
		 		{
		 			section.removeClass(item);
		 		}
 			});

 			//add clicked bg-color to section
 			section.addClass(li.attr('class'));
 			$('#' + section[0].id + ' h2').html(section.attr('class'));
 			
 			
 		});

		//when a padding size gets clicked on...
	 	$('#bg-patterns .padding-picker li').click( function() {

		 	li = $(this); //padding that got clicked on
	 		section = $(this).parent().closest(&quot;section&quot;); //section the padding item lives in
	 		classList = section.attr('class').split(/\s+/); //build array of classes on that section

		 	$.each(classList, function(index, item) { //search classes remove existing padding

		 		if($.inArray(item, paddings) &gt; 0)
		 		{
		 			
		 			section.removeClass(item);
		 		}
		 	});

	 		section.addClass(li.attr('class')); //add clicked padding to section
	 		$('#' + section[0].id + ' h2').html(section.attr('class'));
	 	});

 	});
}

 
 	
function setup()
{



load();



}
  


  $(document).ready(setup);
&lt;/script&gt;


&lt;div id=&quot;bg-textures&quot;&gt;
&lt;section class='fluffy'&gt;&lt;div class='container'&gt;&lt;div class='row'&gt;&lt;div class='col-sm-12'&gt;&lt;h2 class='section-header'&gt;Textures&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;Textures are translucent background images that repeat in both x and y direction. They're coloring is modified by placing a background color on the bottom.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/div&gt;


&lt;div id=&quot;bg-patterns&quot;&gt;

&lt;section class='fluffy'&gt;&lt;div class='container'&gt;&lt;div class='row'&gt;&lt;div class='col-sm-12'&gt;&lt;h2 class='section-header'&gt;Patterns&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;Patterns are opaque background images that repeat in both x and y direction. They're coloring is modified by placing a color overlay on top.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;

&lt;/div&gt;