<section id="top" class="fluffy hero-beyond display--flex gradient-overlay__TopRight">
    <div class="container">
        <div class="hero-beyond--headings">
            <h2 class="heading white">DoIT Services</h2>
            <p class="introduction white">We offer best-in-class services for academic use.</p>
            <span class="default-button button-large bg-white red mobile-block" href="#"><span class="red">Top Services</span></span>
            <a class="default-button button-large bg-black mobile-block" href="#">
                <div class="status-indicator bg-red" data-toggle="tooltip" title="This service is experiencing an outage."></div>Blackboard</a>
            <a class="default-button button-large bg-black mobile-block" href="#">
                <div class="status-indicator bg-emerald" data-toggle="tooltip" title="This service is reported online."></div>SOLAR</a>
            <a class="default-button button-large bg-black mobile-block" href="#">
                <div class="status-indicator bg-sun" data-toggle="tooltip" title="This service is experiencing an outage."></div>Google Apps</a>
            <a class="default-button button-large bg-black mobile-block" href="#">
                <div class="status-indicator bg-river" data-toggle="tooltip" title="This service has a notification."></div>WolfieNet</a>
        </div>
</section>

<nav class="fixedNav navbar--fixed navbar--fixed__default">
    <div class="container">
        <div class="row">
            <div class="display--flex">
                <div class="col-md-3">
                    <h3 class="heading red">Search Services</h3>
                </div>
                <form id="live-search">


                <div class="col-md-9">
                    <div id="custom-search-input">
                        <div class="input-group col-md-12">
                            <input id="service-filter" type="text" class="form-control input-lg" placeholder="WolfieNet (WiFi), echo360, Qualtrics..." />
                            <span class="input-group-btn">
                  <button class="btn btn-info btn-lg bg-red" type="button">
                      <i class="sbuicon-search"></i>
                  </button>
              </span>
                        </div>
                    </div>
                </div>
                </form>
            </div>
        </div>
    </div>
</nav>

<section class="fluffy">
    <div class="container">

        <div class="services">
        </div>
    </div>
</section>

<script id="service-template" type="text/template">

</script>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/2.1.3/mustache.js"></script>

<script>

$(document).ready(function() {

    // The Google Geocoding API url used to get the JSON data
    var servicesURL = "";

    $.ajax({
            url: "https://it.stonybrook.edu/api/v1/services/list?callback=jsonp",
            //jsonp: "$jsonp",
            dataType: "jsonp"
    }).done(function(data) {



    var serviceList = data.nodes;

    var serviceData = [];



    $.each(serviceList, function(index, service) {

        console.log(index);
        console.log(service.node);

        var $service = new Object();
        $service.title = service.node.title;
        $service.audience = service.node.field_audience;
        $service.categories = service.node.field_service_categories;

        $stickers = service.node.field_stickers;
        $stickers = $stickers.split(", ");

        $stickerArr = [];

        $.each($stickers, function(index, sticker) {
            console.log(sticker);
            if(sticker != null && sticker != "") {
                $sticker = new Object();
                $sticker.name = sticker;

                $stickerArr.push($sticker);
            }

        })

        if($stickerArr.length > 0)
        {
            $service.stickers = $stickerArr;
            $service.hasStickers = true;
        }
        else {
            $service.hasStickers = false;
        }

        var hasStatus = service.node.field_display_status_on;

        if(hasStatus == null || hasStatus == "" || hasStatus.toLowerCase() == "never")
        {
            hasStatus = false;
        }
        else {
            hasStatus = true;
        }

        $service.hasStatus = hasStatus;


        $hashtags = service.node.field_hashtags;
        $hashtags = $hashtags.split(", ");

        $hashtagArr = [];

        $.each($hashtags, function(index, hashtag) {
            console.log(hashtag);
            if(hashtag != null && hashtag != "") {
                $hashtag = new Object();
                hashtag = hashtag.replace(" ", "");
                hashtag = "#" + hashtag;

                $hashtag.name = hashtag;

                $hashtagArr.push($hashtag);
            }

        })

        if($hashtagArr.length > 0)
        {
            $service.hashtags = $hashtagArr;
            $service.hasHashtags = true;
        }
        else {
            $service.hasHashtags = false;
        }

        
        $service.url = service.node.path;
        $service.introduction = service.node.introduction;

        serviceData.push($service);

        console.log($service);
    })



    console.log(serviceData);


    var template = $("#service-template").html();

    $.get('/placeholders/templates/service-template.mst', function(template) {

        $.each(serviceData, function(index, service){
            var rendered = Mustache.render(template, service);
            $(".services").append(rendered);
        })

    });



    });



});


$(document).ready(function(){
    console.log($("#service-filter"));

    $("#service-filter").keyup(function(){
        console.log("Test");
        // Retrieve the input field text and reset the count to zero
        var filter = $(this).val(), count = 0;
        console.log(filter);

        // Loop through the comment list
        $(".services .service-card").each(function(){

            // If the list item does not contain the text phrase fade it out
            if ($(this).text().search(new RegExp(filter, "i")) < 0) {
                $(this).fadeOut();

            // Show the list item if the phrase matches and increase the count by 1
            } else {
                $(this).show();
                count++;
            }
        });

        // Update the count
        var numberItems = count;
        $("#filter-count").text("Number of Icons = "+count);
    });
});

</script>
